@model ScampusCloud.Models.AccessGroupModel
@using ScampusCloud.Utility
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    if (Model.IsEdit == false)
    {
        ViewData["Title"] = "Add Access Group";
    }
    else
    {
        ViewData["Title"] = "Edit Access Group";
    }
}

<!--begin::Form-->
<form id="frmManageAccessGroup" asp-action="AddEditAccessGroup" asp-controller="AccessGroup" method="post">
    <div class="subheader py-2 py-lg-4 subheader-solid" id="kt_subheader">
        <div class="container-fluid d-flex align-items-center justify-content-between flex-wrap flex-sm-nowrap">
            <!--begin::Info-->
            <div class="d-flex align-items-center flex-wrap mr-1">
                <!--begin::Page Heading-->
                <div class="d-flex align-items-baseline mr-5">
                    <!--begin::Page Title-->
                    <h5 class="text-dark font-weight-bold my-2 mr-5">@ViewData["Title"]</h5>
                    <!--end::Page Title-->
                </div>
                <!--end::Page Heading-->
            </div>
            <!--end::Info-->
        </div>
    </div>
    <div class="d-flex flex-column-fluid flex-center">
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <!--begin::Card-->
                    <div class="card card-custom gutter-b example-compact">
                        <div class="card card-custom card-sticky" id="kt_page_sticky_card">
                            <div class="card-header" style="">
                                <div class="card-title">
                                    <h3 class="card-label">
                                        <i class="mr-2"></i>
                                        <small class=""></small>
                                    </h3>
                                </div>
                                @Html.HiddenFor(x => x.IsEdit)
                                @Html.HiddenFor(x => x.Id)
                                @Html.HiddenFor(x => x.CompanyId)
                                @Html.HiddenFor(x => x.CreatedBy)
                                @Html.HiddenFor(x => x.ModifiedBy)
                                @Html.HiddenFor(x => x.IsActive, new { id = "hdnIsActive" })
                                @Html.HiddenFor(x => x.Is_Canteen, new { id = "hdnIsCanteen" })
                                @Html.HiddenFor(x => x.DoorGroupIds, new { id = "DoorGroupIds" })
                                <div class="card-toolbar">
                                    <a href="/AccessGroup/AccessGroup" class="btn btn-danger font-weight-bolder mr-2">
                                        <i class="flaticon2-left-arrow-1 icon-sm-nm"></i>Back
                                    </a>
                                    @{
                                        if (ViewBag.NoRecordExist == null)
                                        {
                                            <button type="submit" asp-action="AddEditAccessGroup" class="btn btn-primary font-weight-bolder mr-2">
                                                <i class="flaticon-interface-5"></i>
                                                <span class="nav-text">@(Model.IsEdit == false ? "Save & Add New" : "Update & continue")</span>
                                            </button>
                                            <button type="submit" form="frmManageAccessGroup" name="saveAndExit" value="saveAndExit " class="btn btn-success font-weight-bolder mr-2">
                                                <i class="flaticon-logout"></i>
                                                <span class="nav-text">@(Model.IsEdit == false ? "Save & Exit" : "Update & Exit")</span>
                                            </button>
                                        }
                                    }
                                </div>
                            </div>
                            <div class="row h-100 justify-content-center align-items-center">
                                <div class="col-md-12">
                                    <div class="card-body">
                                        @Html.Partial("_NotificationAlert", new ScampusCloud.Models.ResponseMessage() { IsSuccess = Model.IsSuccess, Response_Message = Model.Response_Message })
                                        <div class="form-group row">
                                            <div class="col-3 text-right">
                                                <label class="col-form-label">
                                                    Name:
                                                    <span class="text-danger">*</span>
                                                </label>
                                            </div>
                                            <div class="col-3">
                                                @Html.TextBoxFor(m => m.Name, new { @class = "form-control", @required = "required" })
                                                @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="col-1 text-right">
                                                <label class="col-form-label">
                                                    Description:
                                                </label>
                                            </div>
                                            <div class="col-3">
                                                @Html.TextBoxFor(m => m.Description, new { @class = "form-control", @required = "required" })
                                            </div>
                                        </div>

                                        <div class="form-group row">
                                            <div class="col-3 text-right">
                                                <label class="col-form-label">
                                                    Code:
                                                    <span class="text-danger">*</span>
                                                </label>
                                            </div>
                                            <div class="col-3">
                                                @Html.TextBoxFor(m => m.Code, new { @class = "form-control", @required = "required" })
                                                @Html.ValidationMessageFor(m => m.Code, "", new { @class = "text-danger" })
                                            </div>

                                            <div class="col-1" id="CanteenType">
                                                <label class="col-form-label">
                                                    Canteen Type:
                                                </label>
                                            </div>
                                            <div class="col-3">
                                                @Html.DropDownListFor(model => model.AccessGroupTypeId, new SelectList(Model.lstAccessGroupDropdown, "Value", "Text"), "Select Canteen Type"
                                                 , new { @class = "form-control", @id = "ddlCanteenType" })
                                            </div>

                                        </div>
                                        <div class="form-group row">
                                            <div class="col-3 text-right">
                                                <label class="col-form-label">Is SAG: </label>
                                            </div>
                                            <div class="col-3">
                                                <span class='switch switch-icon'>
                                                    <label>
                                                        <input type='checkbox' id="chkIsCanteen" checked="@(Model.Is_Canteen == true ? "checked" : "")">
                                                        <span></span>
                                                    </label>
                                                </span>
                                            </div>
                                            <div class="col-3 text-right">
                                                <label class="col-form-label">Is Active: </label>
                                            </div>
                                            <div class="col-3">
                                                <span class='switch switch-icon'>
                                                    <label>
                                                        <input type='checkbox' id="chkIsActive" checked="@(Model.IsActive ? "checked" : "")">
                                                        <span></span>
                                                    </label>
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="card-body">
                                        <div class="form-group row">
                                            <div class="col-3 text-right">
                                                <label class="col-form-label">
                                                    Door Group:
                                                </label>
                                            </div>
                                            <div class="col-3">
                                                @Html.HiddenFor(Model => Model.DoorGroupIds)
                                                @Html.HiddenFor(Model => Model.DoorGroupId)
                                                <select id="ddlDoorGroup" multiple="multiple" required=required name="ddlDoorGroup" onchange="SelectDoorGroup()">
                                                    @if (Model.lstDoorGroupDropdown != null)
                                                    {
                                                        foreach (var item in Model.lstDoorGroupDropdown)
                                                        {
                                                            if (item.Text != null)
                                                            {
                                                                <option value="@item.Value">
                                                                    @item.Text
                                                                </option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                @*@Html.DropDownListFor(model => model.DoorGroupId, new SelectList(Model.lstDoorGroupDropdown, "Value", "Text"), "Select Door Group"
                                                    , new { @class = "form-control", @id = "ddlDoorGroup" })*@
                                            </div>
                                            <div class="col-1 text-right">
                                                <label class="col-form-label">
                                                    Session:
                                                </label>
                                            </div>
                                            <div class="col-3">
                                                @Html.HiddenFor(Model => Model.SessionIds)
                                                @Html.HiddenFor(Model => Model.SessionId)
                                                <select id="ddlSession" multiple="multiple" required=required name="ddlSession" onchange="SelectSession()">
                                                    @if (Model.lstSessionDropdown != null)
                                                    {
                                                        foreach (var item in Model.lstSessionDropdown)
                                                        {
                                                            if (item.Text != null)
                                                            {
                                                                <option value="@item.Value">
                                                                    @item.Text
                                                                </option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                                @*@Html.DropDownListFor(model => model.DoorGroupId, new SelectList(Model.lstSessionDropdown, "Value", "Text"), "Select Session"
                                                    , new { @class = "form-control", @id = "ddlSession" })*@
                                            </div>
                                            <div class="col-2">
                                                <button type="button" class="btn btn-success font-weight-bolder mr-2" id="btnAdd">
                                                    <i class="flaticon-add"></i>
                                                    <span class="nav-text">Add</span>
                                                </button>
                                            </div>
                                        </div>
                                        <div class="form-group row" id="myPartialContainer">
                                            @if (Model.lstAccessGroupLevel != null && Model.lstAccessGroupLevel.Count > 0)
                                            {
                                                @Html.Partial("_AccessGroupLevel", Model.lstAccessGroupLevel)
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!--end::Card-->
                </div>
            </div>
        </div>
    </div>
</form>

@section Scripts{

    <link href="~/assets/css/bootstrap-multiselect.css" rel="stylesheet" />
    <script src="~/assets/js/bootstrap-multiselect.js"></script>

    <script>
        $(document).ready(function () {
            var result = '@Model.DoorGroupIds'.replace(' ', '').split(',');
            var result1 = '@Model.SessionIds'.replace(' ','').split(',');
            $("#ddlDoorGroup").val(result);
            $("#ddlSession").val(result1);
            if ('@Model.Is_Canteen' == 'True') {
                $('#chkIsCanteen').prop('checked', true);
                $('#CanteenType').show();
                $("#ddlCanteenType").show();
            }
            else {
                $('#chkIsCanteen').prop('checked', false);
                $('#CanteenType').hide();
                $("#ddlCanteenType").hide();
            }
        })
        $(function () {
            $('#ddlDoorGroup').multiselect({
                includeSelectAllOption: true,
                selectAllValue: 'multiselect-all',
                enableFiltering: true,
                enableCaseInsensitiveFiltering: true,
                maxHeight: '300',
                buttonWidth: '235',
            });
            $('#ddlSession').multiselect({
                includeSelectAllOption: true,
                selectAllValue: 'multiselect-all',
                enableFiltering: true,
                enableCaseInsensitiveFiltering: true,
                maxHeight: '300',
                buttonWidth: '235',
            });
        });
    </script>
    <script type="text/javascript">
        var arrDoorGroupSelected = [];
        var arrSessionSelected = [];
        let DoorGroup = null;
        let Session = null;
        var lstAccessGroupLevel = [];
        $('#chkIsCanteen').click(function () {
            if ($(this).is(':checked')) {
                $('#CanteenType').show();
                $("#ddlCanteenType").show();
            } else {
                $('#CanteenType').hide();
                $("#ddlCanteenType").hide();
            }
        });
        $("#btnAdd").click(function () {
            // Define isCombinationExists function within the click event handler scope
            function isCombinationExists(lstAccessGroupLevel, combination) {
                // Iterate through lstAccessGroupLevel to check for existence of exact combination
                for (let i = 0; i < lstAccessGroupLevel.length; i++) {
                    // Compare each combination in lstAccessGroupLevel with the given combination
                    if (lstAccessGroupLevel[i].DoorgroupId === combination.DoorgroupId &&
                        lstAccessGroupLevel[i].SessionId === combination.SessionId) {
                        // Exact combination already exists
                        return true;
                    }
                }
                // Exact combination does not exist
                return false;
            }

            if (arrDoorGroupSelected.length == 0) {
                SelectDoorGroup();
                DoorGroup = arrDoorGroupSelected;
            } else {
                DoorGroup = arrDoorGroupSelected;
            }

            if (arrSessionSelected.length == 0) {
                SelectSession();
                Session = arrSessionSelected;
            } else {
                Session = arrSessionSelected;
            }
            
            //var lstAccessGroupLevel = [];
            DoorGroup = removeDuplicates(DoorGroup);
            Session = removeDuplicates(Session);
            // Separate arrays to store existing and new combinations
            var existingCombinations = [];
            var newCombinations = [];
            // Iterate through all combinations and separate existing and new ones
            for (let i = 0; i < DoorGroup.length; i++) {
                for (let j = 0; j < Session.length; j++) {
                    let combination = {
                        DoorgroupId: DoorGroup[i].split(',')[0],
                        DoorGroup: DoorGroup[i].split(',')[1],
                        SessionId: Session[j].split(',')[0],
                        Session: Session[j].split(',')[1]
                    };
                    // Check if combination already exists in lstAccessGroupLevel
                    if (isCombinationExists(lstAccessGroupLevel, combination)) {
                        existingCombinations.push(combination);
                    } else {
                        newCombinations.push(combination);
                        lstAccessGroupLevel.push(combination);
                    }
                }
            }
            // Display error message for existing combinations
            if (existingCombinations.length > 0) {
                Swal.fire({
                    title: 'Duplicate',
                    text: 'Duplicate combinations found!',
                    icon: "error",
                    showCancelButton: false,
                    confirmButtonText: 'OK'
                });
            } else {
                // Display success message for new combinations only if no existing combinations found
                if (newCombinations.length > 0) {
                    var successMessage = 'New combinations added:\n';
                    for (let i = 0; i < newCombinations.length; i++) {
                        successMessage += 'DoorgroupId: ' + newCombinations[i].DoorgroupId + ', SessionId: ' + newCombinations[i].SessionId + '\n';
                    }
                    Swal.fire({
                        title: 'Success',
                        text: successMessage,
                        icon: "success",
                        showCancelButton: false,
                        confirmButtonText: 'OK'
                    });
                }
            }
             $.ajax({
                 url: '/AccessGroup/AccessGroupLevel',
                 type: 'POST',
                 contentType: 'application/json',
                 data: JSON.stringify(newCombinations),
                 success: function (response) {
                     $('#myPartialContainer').html(response);
                 },
                 error: function (xhr, status, error) {
                     console.error("Error:", error);
                 }
             });
        });
        function removeDuplicates(arr) {
            return arr.filter((item,
                index) => arr.indexOf(item) === index);
        }
        $("#chkIsActive").change(function () {
            $("#hdnIsActive").val($(this).is(':checked'));
        });
        $("#chkIsCanteen").change(function () {
            $("#hdnIsCanteen").val($(this).is(':checked'));
        });
        function SelectDoorGroup() {
            arrDoorGroupSelected = [];
            var selected = $("#ddlDoorGroup option:selected");
            var message = "";
            selected.each(function () {
                arrDoorGroupSelected.push($(this).val() + ',' + $(this).text().trim());
                message += $(this).text() + " " + $(this).val() + "\n";
            });
            $("#DoorGroupId").val(arrDoorGroupSelected.join(','));
        }
        function SelectSession() {
            var selected = $("#ddlSession option:selected");
            var message = "";
            selected.each(function () {
                arrSessionSelected.push($(this).val() + ',' + $(this).text().trim());
                message += $(this).text() + " " + $(this).val() + "\n";
            });
            $("#SessionId").val(arrSessionSelected.join(','));
        }
    </script>

}
